def win_check(pole):
    cnt_diag1 = 1
    cnt_diag2 = 1
    for i in range(1,3):
        cnt_string = 1
        cnt_column = 1
        str = ''
        str1 = ''
        for j in range(1,3):                                          # циклами проходимся по числам, проверяем условия выйгрыша
            if (pole[i][j] == pole[i][j+1]) and pole[i][j] != ' -':
                cnt_string +=1
                str = pole[i][j]
            if (pole[j][i] == pole[j+1][i]) and pole[j][i] != ' -':
                cnt_column +=1
                str1 = pole[j][i]
            if pole[i][j] == pole[i+1][j+1] and pole[i][j] != ' -' and i == j:
                cnt_diag1 += 1
            if pole[i][j] == pole[-i][-j] and pole[i][j] != ' -' and i + j == 4:
                cnt_diag2 += 1
        if cnt_column == 3:
            print(f'Победили {str1}!\n')                              # выводим именно через переменные str потому что находимся вне второго цикла, соответственно не можем j использовать
            return 2
        if cnt_string == 3:
            print(f'Победили {str}!\n')
            return 2
    if cnt_diag2 == 3 or cnt_diag1 == 3:
        print(f'Победили {pole[2][2]}!\n')           # выводим ячейку [2][2] потому что она присутствует в обеих диагоналях
        return 2

def input_check(a):                                  # функция для проверки правильности вводимых данных
    if a == '1^^11%%1%':
        print('Клетка уже занята, выбери другую!\n')
        return input_check(input())
    if  len(a) != 3:
        print('Мне нужно ровно 2 целых числа через пробел, ни больше , ни меньше!\n')
        return input_check(input())
    if (48 <= ord(a[0]) <= 57) and (48 <= ord(a[2]) <= 57):
        if 1 <= int(a[0]) <= 3 and 1 <= int(a[2]) <= 3 and a[1] == ' ':
            return a
        else:
            print('Что-то тут не так, проверь правильность заполнения снова!\n')
            return input_check(input())
    else:
        print('Мне нужны целые числа!\n')
        return input_check(input())


pole_0 = [                                                                                # начальное поле
    ['', '  1', ' 2', ' 3'],
    ['1', ' -', ' -', ' -'],
    ['2', ' -', ' -', ' -'],
    ['3', ' -', ' -', ' -'],
]

def xo(x):
    pole = x

    aa = input(
        '\nПоставьте Х на любом месте, где стоит "-"\nЧтобы указать место на поле, напишите 2 цифры через пробел, первая - номер строки, вторая - номер столбца\n\n')
    a = input_check(aa)
    if pole[int(a[2])][int(a[0])] == ' -':                                                 # проверка на занятость поля
        a_ = a
    else:
        a_ = input_check('1^^11%%1%')


    pole[int(a_[2])][int(a_[0])] = ' X'

    if win_check(pole) == 2: return 0

    if not any(' -' in items for items in pole):                                           # Если все поля заняты - ничья
        print('The game is over, tie')
        return 0

    for i in range(4): print(*pole[i])                                                     # принт поля


    bb = input(
        '\nПоставьте 0 на любом месте, где стоит "-"\nЧтобы указать место на поле, напишите 2 цифры через пробел, первая - номер строки, вторая - номер столбца\n\n')
    b = input_check(bb)
    if pole[int(b[2])][int(b[0])] == ' -':
        b_ = b
    else:
        b_ = input_check('1^^11%%1%')

    pole[int(b_[2])][int(b_[0])] = ' 0'
    for i in range(4): print(*pole[i])
    if win_check(pole) == 2: return 0
    return xo(pole)

for i in range(4): print(*pole_0[i])
xo(pole_0)
